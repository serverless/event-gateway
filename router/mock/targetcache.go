// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/serverless/event-gateway/router (interfaces: Targeter)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	event "github.com/serverless/event-gateway/event"
	function "github.com/serverless/event-gateway/function"
	router "github.com/serverless/event-gateway/router"
	cors "github.com/serverless/event-gateway/subscription/cors"
	reflect "reflect"
)

// MockTargeter is a mock of Targeter interface
type MockTargeter struct {
	ctrl     *gomock.Controller
	recorder *MockTargeterMockRecorder
}

// MockTargeterMockRecorder is the mock recorder for MockTargeter
type MockTargeterMockRecorder struct {
	mock *MockTargeter
}

// NewMockTargeter creates a new mock instance
func NewMockTargeter(ctrl *gomock.Controller) *MockTargeter {
	mock := &MockTargeter{ctrl: ctrl}
	mock.recorder = &MockTargeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargeter) EXPECT() *MockTargeterMockRecorder {
	return m.recorder
}

// AsyncSubscribers mocks base method
func (m *MockTargeter) AsyncSubscribers(arg0, arg1 string, arg2 event.TypeName) []router.AsyncSubscriber {
	ret := m.ctrl.Call(m, "AsyncSubscribers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]router.AsyncSubscriber)
	return ret0
}

// AsyncSubscribers indicates an expected call of AsyncSubscribers
func (mr *MockTargeterMockRecorder) AsyncSubscribers(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncSubscribers", reflect.TypeOf((*MockTargeter)(nil).AsyncSubscribers), arg0, arg1, arg2)
}

// CORS mocks base method
func (m *MockTargeter) CORS(arg0, arg1 string) *cors.CORS {
	ret := m.ctrl.Call(m, "CORS", arg0, arg1)
	ret0, _ := ret[0].(*cors.CORS)
	return ret0
}

// CORS indicates an expected call of CORS
func (mr *MockTargeterMockRecorder) CORS(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CORS", reflect.TypeOf((*MockTargeter)(nil).CORS), arg0, arg1)
}

// EventType mocks base method
func (m *MockTargeter) EventType(arg0 string, arg1 event.TypeName) *event.Type {
	ret := m.ctrl.Call(m, "EventType", arg0, arg1)
	ret0, _ := ret[0].(*event.Type)
	return ret0
}

// EventType indicates an expected call of EventType
func (mr *MockTargeterMockRecorder) EventType(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventType", reflect.TypeOf((*MockTargeter)(nil).EventType), arg0, arg1)
}

// Function mocks base method
func (m *MockTargeter) Function(arg0 string, arg1 function.ID) *function.Function {
	ret := m.ctrl.Call(m, "Function", arg0, arg1)
	ret0, _ := ret[0].(*function.Function)
	return ret0
}

// Function indicates an expected call of Function
func (mr *MockTargeterMockRecorder) Function(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Function", reflect.TypeOf((*MockTargeter)(nil).Function), arg0, arg1)
}

// SyncSubscriber mocks base method
func (m *MockTargeter) SyncSubscriber(arg0, arg1 string, arg2 event.TypeName) *router.SyncSubscriber {
	ret := m.ctrl.Call(m, "SyncSubscriber", arg0, arg1, arg2)
	ret0, _ := ret[0].(*router.SyncSubscriber)
	return ret0
}

// SyncSubscriber indicates an expected call of SyncSubscriber
func (mr *MockTargeterMockRecorder) SyncSubscriber(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSubscriber", reflect.TypeOf((*MockTargeter)(nil).SyncSubscriber), arg0, arg1, arg2)
}
