// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/serverless/event-gateway/function (interfaces: Provider)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockProvider) Call(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockProviderMockRecorder) Call(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockProvider)(nil).Call), arg0)
}

// MarshalLogObject mocks base method
func (m *MockProvider) MarshalLogObject(arg0 zapcore.ObjectEncoder) error {
	ret := m.ctrl.Call(m, "MarshalLogObject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarshalLogObject indicates an expected call of MarshalLogObject
func (mr *MockProviderMockRecorder) MarshalLogObject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalLogObject", reflect.TypeOf((*MockProvider)(nil).MarshalLogObject), arg0)
}
