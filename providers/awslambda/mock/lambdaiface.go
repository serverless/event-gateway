// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/lambda/lambdaiface (interfaces: LambdaAPI)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	lambda "github.com/aws/aws-sdk-go/service/lambda"
	gomock "github.com/golang/mock/gomock"
)

// MockLambdaAPI is a mock of LambdaAPI interface
type MockLambdaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaAPIMockRecorder
}

// MockLambdaAPIMockRecorder is the mock recorder for MockLambdaAPI
type MockLambdaAPIMockRecorder struct {
	mock *MockLambdaAPI
}

// NewMockLambdaAPI creates a new mock instance
func NewMockLambdaAPI(ctrl *gomock.Controller) *MockLambdaAPI {
	mock := &MockLambdaAPI{ctrl: ctrl}
	mock.recorder = &MockLambdaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLambdaAPI) EXPECT() *MockLambdaAPIMockRecorder {
	return m.recorder
}

// AddPermission mocks base method
func (m *MockLambdaAPI) AddPermission(arg0 *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) {
	ret := m.ctrl.Call(m, "AddPermission", arg0)
	ret0, _ := ret[0].(*lambda.AddPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermission indicates an expected call of AddPermission
func (mr *MockLambdaAPIMockRecorder) AddPermission(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermission", reflect.TypeOf((*MockLambdaAPI)(nil).AddPermission), arg0)
}

// AddPermissionRequest mocks base method
func (m *MockLambdaAPI) AddPermissionRequest(arg0 *lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput) {
	ret := m.ctrl.Call(m, "AddPermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AddPermissionOutput)
	return ret0, ret1
}

// AddPermissionRequest indicates an expected call of AddPermissionRequest
func (mr *MockLambdaAPIMockRecorder) AddPermissionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).AddPermissionRequest), arg0)
}

// AddPermissionWithContext mocks base method
func (m *MockLambdaAPI) AddPermissionWithContext(arg0 aws.Context, arg1 *lambda.AddPermissionInput, arg2 ...request.Option) (*lambda.AddPermissionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPermissionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.AddPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermissionWithContext indicates an expected call of AddPermissionWithContext
func (mr *MockLambdaAPIMockRecorder) AddPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).AddPermissionWithContext), varargs...)
}

// CreateAlias mocks base method
func (m *MockLambdaAPI) CreateAlias(arg0 *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := m.ctrl.Call(m, "CreateAlias", arg0)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias
func (mr *MockLambdaAPIMockRecorder) CreateAlias(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockLambdaAPI)(nil).CreateAlias), arg0)
}

// CreateAliasRequest mocks base method
func (m *MockLambdaAPI) CreateAliasRequest(arg0 *lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := m.ctrl.Call(m, "CreateAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AliasConfiguration)
	return ret0, ret1
}

// CreateAliasRequest indicates an expected call of CreateAliasRequest
func (mr *MockLambdaAPIMockRecorder) CreateAliasRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasRequest", reflect.TypeOf((*MockLambdaAPI)(nil).CreateAliasRequest), arg0)
}

// CreateAliasWithContext mocks base method
func (m *MockLambdaAPI) CreateAliasWithContext(arg0 aws.Context, arg1 *lambda.CreateAliasInput, arg2 ...request.Option) (*lambda.AliasConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAliasWithContext indicates an expected call of CreateAliasWithContext
func (mr *MockLambdaAPIMockRecorder) CreateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).CreateAliasWithContext), varargs...)
}

// CreateEventSourceMapping mocks base method
func (m *MockLambdaAPI) CreateEventSourceMapping(arg0 *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := m.ctrl.Call(m, "CreateEventSourceMapping", arg0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSourceMapping indicates an expected call of CreateEventSourceMapping
func (mr *MockLambdaAPIMockRecorder) CreateEventSourceMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSourceMapping", reflect.TypeOf((*MockLambdaAPI)(nil).CreateEventSourceMapping), arg0)
}

// CreateEventSourceMappingRequest mocks base method
func (m *MockLambdaAPI) CreateEventSourceMappingRequest(arg0 *lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := m.ctrl.Call(m, "CreateEventSourceMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

// CreateEventSourceMappingRequest indicates an expected call of CreateEventSourceMappingRequest
func (mr *MockLambdaAPIMockRecorder) CreateEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSourceMappingRequest", reflect.TypeOf((*MockLambdaAPI)(nil).CreateEventSourceMappingRequest), arg0)
}

// CreateEventSourceMappingWithContext mocks base method
func (m *MockLambdaAPI) CreateEventSourceMappingWithContext(arg0 aws.Context, arg1 *lambda.CreateEventSourceMappingInput, arg2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventSourceMappingWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSourceMappingWithContext indicates an expected call of CreateEventSourceMappingWithContext
func (mr *MockLambdaAPIMockRecorder) CreateEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSourceMappingWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).CreateEventSourceMappingWithContext), varargs...)
}

// CreateFunction mocks base method
func (m *MockLambdaAPI) CreateFunction(arg0 *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error) {
	ret := m.ctrl.Call(m, "CreateFunction", arg0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFunction indicates an expected call of CreateFunction
func (mr *MockLambdaAPIMockRecorder) CreateFunction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunction", reflect.TypeOf((*MockLambdaAPI)(nil).CreateFunction), arg0)
}

// CreateFunctionRequest mocks base method
func (m *MockLambdaAPI) CreateFunctionRequest(arg0 *lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := m.ctrl.Call(m, "CreateFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

// CreateFunctionRequest indicates an expected call of CreateFunctionRequest
func (mr *MockLambdaAPIMockRecorder) CreateFunctionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunctionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).CreateFunctionRequest), arg0)
}

// CreateFunctionWithContext mocks base method
func (m *MockLambdaAPI) CreateFunctionWithContext(arg0 aws.Context, arg1 *lambda.CreateFunctionInput, arg2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFunctionWithContext indicates an expected call of CreateFunctionWithContext
func (mr *MockLambdaAPIMockRecorder) CreateFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunctionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).CreateFunctionWithContext), varargs...)
}

// DeleteAlias mocks base method
func (m *MockLambdaAPI) DeleteAlias(arg0 *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error) {
	ret := m.ctrl.Call(m, "DeleteAlias", arg0)
	ret0, _ := ret[0].(*lambda.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlias indicates an expected call of DeleteAlias
func (mr *MockLambdaAPIMockRecorder) DeleteAlias(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteAlias), arg0)
}

// DeleteAliasRequest mocks base method
func (m *MockLambdaAPI) DeleteAliasRequest(arg0 *lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput) {
	ret := m.ctrl.Call(m, "DeleteAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.DeleteAliasOutput)
	return ret0, ret1
}

// DeleteAliasRequest indicates an expected call of DeleteAliasRequest
func (mr *MockLambdaAPIMockRecorder) DeleteAliasRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasRequest", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteAliasRequest), arg0)
}

// DeleteAliasWithContext mocks base method
func (m *MockLambdaAPI) DeleteAliasWithContext(arg0 aws.Context, arg1 *lambda.DeleteAliasInput, arg2 ...request.Option) (*lambda.DeleteAliasOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAliasWithContext indicates an expected call of DeleteAliasWithContext
func (mr *MockLambdaAPIMockRecorder) DeleteAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteAliasWithContext), varargs...)
}

// DeleteEventSourceMapping mocks base method
func (m *MockLambdaAPI) DeleteEventSourceMapping(arg0 *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := m.ctrl.Call(m, "DeleteEventSourceMapping", arg0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventSourceMapping indicates an expected call of DeleteEventSourceMapping
func (mr *MockLambdaAPIMockRecorder) DeleteEventSourceMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSourceMapping", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteEventSourceMapping), arg0)
}

// DeleteEventSourceMappingRequest mocks base method
func (m *MockLambdaAPI) DeleteEventSourceMappingRequest(arg0 *lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := m.ctrl.Call(m, "DeleteEventSourceMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

// DeleteEventSourceMappingRequest indicates an expected call of DeleteEventSourceMappingRequest
func (mr *MockLambdaAPIMockRecorder) DeleteEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSourceMappingRequest", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteEventSourceMappingRequest), arg0)
}

// DeleteEventSourceMappingWithContext mocks base method
func (m *MockLambdaAPI) DeleteEventSourceMappingWithContext(arg0 aws.Context, arg1 *lambda.DeleteEventSourceMappingInput, arg2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventSourceMappingWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventSourceMappingWithContext indicates an expected call of DeleteEventSourceMappingWithContext
func (mr *MockLambdaAPIMockRecorder) DeleteEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSourceMappingWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteEventSourceMappingWithContext), varargs...)
}

// DeleteFunction mocks base method
func (m *MockLambdaAPI) DeleteFunction(arg0 *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error) {
	ret := m.ctrl.Call(m, "DeleteFunction", arg0)
	ret0, _ := ret[0].(*lambda.DeleteFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFunction indicates an expected call of DeleteFunction
func (mr *MockLambdaAPIMockRecorder) DeleteFunction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFunction", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteFunction), arg0)
}

// DeleteFunctionRequest mocks base method
func (m *MockLambdaAPI) DeleteFunctionRequest(arg0 *lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput) {
	ret := m.ctrl.Call(m, "DeleteFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.DeleteFunctionOutput)
	return ret0, ret1
}

// DeleteFunctionRequest indicates an expected call of DeleteFunctionRequest
func (mr *MockLambdaAPIMockRecorder) DeleteFunctionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFunctionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteFunctionRequest), arg0)
}

// DeleteFunctionWithContext mocks base method
func (m *MockLambdaAPI) DeleteFunctionWithContext(arg0 aws.Context, arg1 *lambda.DeleteFunctionInput, arg2 ...request.Option) (*lambda.DeleteFunctionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.DeleteFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFunctionWithContext indicates an expected call of DeleteFunctionWithContext
func (mr *MockLambdaAPIMockRecorder) DeleteFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFunctionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).DeleteFunctionWithContext), varargs...)
}

// GetAccountSettings mocks base method
func (m *MockLambdaAPI) GetAccountSettings(arg0 *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error) {
	ret := m.ctrl.Call(m, "GetAccountSettings", arg0)
	ret0, _ := ret[0].(*lambda.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings
func (mr *MockLambdaAPIMockRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockLambdaAPI)(nil).GetAccountSettings), arg0)
}

// GetAccountSettingsRequest mocks base method
func (m *MockLambdaAPI) GetAccountSettingsRequest(arg0 *lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput) {
	ret := m.ctrl.Call(m, "GetAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.GetAccountSettingsOutput)
	return ret0, ret1
}

// GetAccountSettingsRequest indicates an expected call of GetAccountSettingsRequest
func (mr *MockLambdaAPIMockRecorder) GetAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsRequest", reflect.TypeOf((*MockLambdaAPI)(nil).GetAccountSettingsRequest), arg0)
}

// GetAccountSettingsWithContext mocks base method
func (m *MockLambdaAPI) GetAccountSettingsWithContext(arg0 aws.Context, arg1 *lambda.GetAccountSettingsInput, arg2 ...request.Option) (*lambda.GetAccountSettingsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettingsWithContext indicates an expected call of GetAccountSettingsWithContext
func (mr *MockLambdaAPIMockRecorder) GetAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).GetAccountSettingsWithContext), varargs...)
}

// GetAlias mocks base method
func (m *MockLambdaAPI) GetAlias(arg0 *lambda.GetAliasInput) (*lambda.AliasConfiguration, error) {
	ret := m.ctrl.Call(m, "GetAlias", arg0)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias
func (mr *MockLambdaAPIMockRecorder) GetAlias(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockLambdaAPI)(nil).GetAlias), arg0)
}

// GetAliasRequest mocks base method
func (m *MockLambdaAPI) GetAliasRequest(arg0 *lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := m.ctrl.Call(m, "GetAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AliasConfiguration)
	return ret0, ret1
}

// GetAliasRequest indicates an expected call of GetAliasRequest
func (mr *MockLambdaAPIMockRecorder) GetAliasRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasRequest", reflect.TypeOf((*MockLambdaAPI)(nil).GetAliasRequest), arg0)
}

// GetAliasWithContext mocks base method
func (m *MockLambdaAPI) GetAliasWithContext(arg0 aws.Context, arg1 *lambda.GetAliasInput, arg2 ...request.Option) (*lambda.AliasConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasWithContext indicates an expected call of GetAliasWithContext
func (mr *MockLambdaAPIMockRecorder) GetAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).GetAliasWithContext), varargs...)
}

// GetEventSourceMapping mocks base method
func (m *MockLambdaAPI) GetEventSourceMapping(arg0 *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := m.ctrl.Call(m, "GetEventSourceMapping", arg0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventSourceMapping indicates an expected call of GetEventSourceMapping
func (mr *MockLambdaAPIMockRecorder) GetEventSourceMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSourceMapping", reflect.TypeOf((*MockLambdaAPI)(nil).GetEventSourceMapping), arg0)
}

// GetEventSourceMappingRequest mocks base method
func (m *MockLambdaAPI) GetEventSourceMappingRequest(arg0 *lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := m.ctrl.Call(m, "GetEventSourceMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

// GetEventSourceMappingRequest indicates an expected call of GetEventSourceMappingRequest
func (mr *MockLambdaAPIMockRecorder) GetEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSourceMappingRequest", reflect.TypeOf((*MockLambdaAPI)(nil).GetEventSourceMappingRequest), arg0)
}

// GetEventSourceMappingWithContext mocks base method
func (m *MockLambdaAPI) GetEventSourceMappingWithContext(arg0 aws.Context, arg1 *lambda.GetEventSourceMappingInput, arg2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventSourceMappingWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventSourceMappingWithContext indicates an expected call of GetEventSourceMappingWithContext
func (mr *MockLambdaAPIMockRecorder) GetEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSourceMappingWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).GetEventSourceMappingWithContext), varargs...)
}

// GetFunction mocks base method
func (m *MockLambdaAPI) GetFunction(arg0 *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error) {
	ret := m.ctrl.Call(m, "GetFunction", arg0)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction
func (mr *MockLambdaAPIMockRecorder) GetFunction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockLambdaAPI)(nil).GetFunction), arg0)
}

// GetFunctionConfiguration mocks base method
func (m *MockLambdaAPI) GetFunctionConfiguration(arg0 *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := m.ctrl.Call(m, "GetFunctionConfiguration", arg0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionConfiguration indicates an expected call of GetFunctionConfiguration
func (mr *MockLambdaAPIMockRecorder) GetFunctionConfiguration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionConfiguration", reflect.TypeOf((*MockLambdaAPI)(nil).GetFunctionConfiguration), arg0)
}

// GetFunctionConfigurationRequest mocks base method
func (m *MockLambdaAPI) GetFunctionConfigurationRequest(arg0 *lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := m.ctrl.Call(m, "GetFunctionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

// GetFunctionConfigurationRequest indicates an expected call of GetFunctionConfigurationRequest
func (mr *MockLambdaAPIMockRecorder) GetFunctionConfigurationRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionConfigurationRequest", reflect.TypeOf((*MockLambdaAPI)(nil).GetFunctionConfigurationRequest), arg0)
}

// GetFunctionConfigurationWithContext mocks base method
func (m *MockLambdaAPI) GetFunctionConfigurationWithContext(arg0 aws.Context, arg1 *lambda.GetFunctionConfigurationInput, arg2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionConfigurationWithContext indicates an expected call of GetFunctionConfigurationWithContext
func (mr *MockLambdaAPIMockRecorder) GetFunctionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionConfigurationWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).GetFunctionConfigurationWithContext), varargs...)
}

// GetFunctionRequest mocks base method
func (m *MockLambdaAPI) GetFunctionRequest(arg0 *lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput) {
	ret := m.ctrl.Call(m, "GetFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.GetFunctionOutput)
	return ret0, ret1
}

// GetFunctionRequest indicates an expected call of GetFunctionRequest
func (mr *MockLambdaAPIMockRecorder) GetFunctionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).GetFunctionRequest), arg0)
}

// GetFunctionWithContext mocks base method
func (m *MockLambdaAPI) GetFunctionWithContext(arg0 aws.Context, arg1 *lambda.GetFunctionInput, arg2 ...request.Option) (*lambda.GetFunctionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionWithContext indicates an expected call of GetFunctionWithContext
func (mr *MockLambdaAPIMockRecorder) GetFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).GetFunctionWithContext), varargs...)
}

// GetPolicy mocks base method
func (m *MockLambdaAPI) GetPolicy(arg0 *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error) {
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*lambda.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockLambdaAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockLambdaAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method
func (m *MockLambdaAPI) GetPolicyRequest(arg0 *lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput) {
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest
func (mr *MockLambdaAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockLambdaAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyWithContext mocks base method
func (m *MockLambdaAPI) GetPolicyWithContext(arg0 aws.Context, arg1 *lambda.GetPolicyInput, arg2 ...request.Option) (*lambda.GetPolicyOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext
func (mr *MockLambdaAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).GetPolicyWithContext), varargs...)
}

// Invoke mocks base method
func (m *MockLambdaAPI) Invoke(arg0 *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	ret := m.ctrl.Call(m, "Invoke", arg0)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke
func (mr *MockLambdaAPIMockRecorder) Invoke(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockLambdaAPI)(nil).Invoke), arg0)
}

// InvokeAsync mocks base method
func (m *MockLambdaAPI) InvokeAsync(arg0 *lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error) {
	ret := m.ctrl.Call(m, "InvokeAsync", arg0)
	ret0, _ := ret[0].(*lambda.InvokeAsyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeAsync indicates an expected call of InvokeAsync
func (mr *MockLambdaAPIMockRecorder) InvokeAsync(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAsync", reflect.TypeOf((*MockLambdaAPI)(nil).InvokeAsync), arg0)
}

// InvokeAsyncRequest mocks base method
func (m *MockLambdaAPI) InvokeAsyncRequest(arg0 *lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput) {
	ret := m.ctrl.Call(m, "InvokeAsyncRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.InvokeAsyncOutput)
	return ret0, ret1
}

// InvokeAsyncRequest indicates an expected call of InvokeAsyncRequest
func (mr *MockLambdaAPIMockRecorder) InvokeAsyncRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAsyncRequest", reflect.TypeOf((*MockLambdaAPI)(nil).InvokeAsyncRequest), arg0)
}

// InvokeAsyncWithContext mocks base method
func (m *MockLambdaAPI) InvokeAsyncWithContext(arg0 aws.Context, arg1 *lambda.InvokeAsyncInput, arg2 ...request.Option) (*lambda.InvokeAsyncOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvokeAsyncWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.InvokeAsyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeAsyncWithContext indicates an expected call of InvokeAsyncWithContext
func (mr *MockLambdaAPIMockRecorder) InvokeAsyncWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAsyncWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).InvokeAsyncWithContext), varargs...)
}

// InvokeRequest mocks base method
func (m *MockLambdaAPI) InvokeRequest(arg0 *lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput) {
	ret := m.ctrl.Call(m, "InvokeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.InvokeOutput)
	return ret0, ret1
}

// InvokeRequest indicates an expected call of InvokeRequest
func (mr *MockLambdaAPIMockRecorder) InvokeRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeRequest", reflect.TypeOf((*MockLambdaAPI)(nil).InvokeRequest), arg0)
}

// InvokeWithContext mocks base method
func (m *MockLambdaAPI) InvokeWithContext(arg0 aws.Context, arg1 *lambda.InvokeInput, arg2 ...request.Option) (*lambda.InvokeOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvokeWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeWithContext indicates an expected call of InvokeWithContext
func (mr *MockLambdaAPIMockRecorder) InvokeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).InvokeWithContext), varargs...)
}

// ListAliases mocks base method
func (m *MockLambdaAPI) ListAliases(arg0 *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error) {
	ret := m.ctrl.Call(m, "ListAliases", arg0)
	ret0, _ := ret[0].(*lambda.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases
func (mr *MockLambdaAPIMockRecorder) ListAliases(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockLambdaAPI)(nil).ListAliases), arg0)
}

// ListAliasesRequest mocks base method
func (m *MockLambdaAPI) ListAliasesRequest(arg0 *lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput) {
	ret := m.ctrl.Call(m, "ListAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListAliasesOutput)
	return ret0, ret1
}

// ListAliasesRequest indicates an expected call of ListAliasesRequest
func (mr *MockLambdaAPIMockRecorder) ListAliasesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesRequest", reflect.TypeOf((*MockLambdaAPI)(nil).ListAliasesRequest), arg0)
}

// ListAliasesWithContext mocks base method
func (m *MockLambdaAPI) ListAliasesWithContext(arg0 aws.Context, arg1 *lambda.ListAliasesInput, arg2 ...request.Option) (*lambda.ListAliasesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliasesWithContext indicates an expected call of ListAliasesWithContext
func (mr *MockLambdaAPIMockRecorder) ListAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListAliasesWithContext), varargs...)
}

// ListEventSourceMappings mocks base method
func (m *MockLambdaAPI) ListEventSourceMappings(arg0 *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error) {
	ret := m.ctrl.Call(m, "ListEventSourceMappings", arg0)
	ret0, _ := ret[0].(*lambda.ListEventSourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSourceMappings indicates an expected call of ListEventSourceMappings
func (mr *MockLambdaAPIMockRecorder) ListEventSourceMappings(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourceMappings", reflect.TypeOf((*MockLambdaAPI)(nil).ListEventSourceMappings), arg0)
}

// ListEventSourceMappingsPages mocks base method
func (m *MockLambdaAPI) ListEventSourceMappingsPages(arg0 *lambda.ListEventSourceMappingsInput, arg1 func(*lambda.ListEventSourceMappingsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "ListEventSourceMappingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventSourceMappingsPages indicates an expected call of ListEventSourceMappingsPages
func (mr *MockLambdaAPIMockRecorder) ListEventSourceMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourceMappingsPages", reflect.TypeOf((*MockLambdaAPI)(nil).ListEventSourceMappingsPages), arg0, arg1)
}

// ListEventSourceMappingsPagesWithContext mocks base method
func (m *MockLambdaAPI) ListEventSourceMappingsPagesWithContext(arg0 aws.Context, arg1 *lambda.ListEventSourceMappingsInput, arg2 func(*lambda.ListEventSourceMappingsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSourceMappingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventSourceMappingsPagesWithContext indicates an expected call of ListEventSourceMappingsPagesWithContext
func (mr *MockLambdaAPIMockRecorder) ListEventSourceMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourceMappingsPagesWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListEventSourceMappingsPagesWithContext), varargs...)
}

// ListEventSourceMappingsRequest mocks base method
func (m *MockLambdaAPI) ListEventSourceMappingsRequest(arg0 *lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput) {
	ret := m.ctrl.Call(m, "ListEventSourceMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListEventSourceMappingsOutput)
	return ret0, ret1
}

// ListEventSourceMappingsRequest indicates an expected call of ListEventSourceMappingsRequest
func (mr *MockLambdaAPIMockRecorder) ListEventSourceMappingsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourceMappingsRequest", reflect.TypeOf((*MockLambdaAPI)(nil).ListEventSourceMappingsRequest), arg0)
}

// ListEventSourceMappingsWithContext mocks base method
func (m *MockLambdaAPI) ListEventSourceMappingsWithContext(arg0 aws.Context, arg1 *lambda.ListEventSourceMappingsInput, arg2 ...request.Option) (*lambda.ListEventSourceMappingsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSourceMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.ListEventSourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSourceMappingsWithContext indicates an expected call of ListEventSourceMappingsWithContext
func (mr *MockLambdaAPIMockRecorder) ListEventSourceMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourceMappingsWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListEventSourceMappingsWithContext), varargs...)
}

// ListFunctions mocks base method
func (m *MockLambdaAPI) ListFunctions(arg0 *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error) {
	ret := m.ctrl.Call(m, "ListFunctions", arg0)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctions indicates an expected call of ListFunctions
func (mr *MockLambdaAPIMockRecorder) ListFunctions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctions", reflect.TypeOf((*MockLambdaAPI)(nil).ListFunctions), arg0)
}

// ListFunctionsPages mocks base method
func (m *MockLambdaAPI) ListFunctionsPages(arg0 *lambda.ListFunctionsInput, arg1 func(*lambda.ListFunctionsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "ListFunctionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFunctionsPages indicates an expected call of ListFunctionsPages
func (mr *MockLambdaAPIMockRecorder) ListFunctionsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionsPages", reflect.TypeOf((*MockLambdaAPI)(nil).ListFunctionsPages), arg0, arg1)
}

// ListFunctionsPagesWithContext mocks base method
func (m *MockLambdaAPI) ListFunctionsPagesWithContext(arg0 aws.Context, arg1 *lambda.ListFunctionsInput, arg2 func(*lambda.ListFunctionsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFunctionsPagesWithContext indicates an expected call of ListFunctionsPagesWithContext
func (mr *MockLambdaAPIMockRecorder) ListFunctionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionsPagesWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListFunctionsPagesWithContext), varargs...)
}

// ListFunctionsRequest mocks base method
func (m *MockLambdaAPI) ListFunctionsRequest(arg0 *lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput) {
	ret := m.ctrl.Call(m, "ListFunctionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListFunctionsOutput)
	return ret0, ret1
}

// ListFunctionsRequest indicates an expected call of ListFunctionsRequest
func (mr *MockLambdaAPIMockRecorder) ListFunctionsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionsRequest", reflect.TypeOf((*MockLambdaAPI)(nil).ListFunctionsRequest), arg0)
}

// ListFunctionsWithContext mocks base method
func (m *MockLambdaAPI) ListFunctionsWithContext(arg0 aws.Context, arg1 *lambda.ListFunctionsInput, arg2 ...request.Option) (*lambda.ListFunctionsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctionsWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionsWithContext indicates an expected call of ListFunctionsWithContext
func (mr *MockLambdaAPIMockRecorder) ListFunctionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionsWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListFunctionsWithContext), varargs...)
}

// ListTags mocks base method
func (m *MockLambdaAPI) ListTags(arg0 *lambda.ListTagsInput) (*lambda.ListTagsOutput, error) {
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*lambda.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockLambdaAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockLambdaAPI)(nil).ListTags), arg0)
}

// ListTagsRequest mocks base method
func (m *MockLambdaAPI) ListTagsRequest(arg0 *lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput) {
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest
func (mr *MockLambdaAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockLambdaAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method
func (m *MockLambdaAPI) ListTagsWithContext(arg0 aws.Context, arg1 *lambda.ListTagsInput, arg2 ...request.Option) (*lambda.ListTagsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext
func (mr *MockLambdaAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListTagsWithContext), varargs...)
}

// ListVersionsByFunction mocks base method
func (m *MockLambdaAPI) ListVersionsByFunction(arg0 *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error) {
	ret := m.ctrl.Call(m, "ListVersionsByFunction", arg0)
	ret0, _ := ret[0].(*lambda.ListVersionsByFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsByFunction indicates an expected call of ListVersionsByFunction
func (mr *MockLambdaAPIMockRecorder) ListVersionsByFunction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsByFunction", reflect.TypeOf((*MockLambdaAPI)(nil).ListVersionsByFunction), arg0)
}

// ListVersionsByFunctionRequest mocks base method
func (m *MockLambdaAPI) ListVersionsByFunctionRequest(arg0 *lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput) {
	ret := m.ctrl.Call(m, "ListVersionsByFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListVersionsByFunctionOutput)
	return ret0, ret1
}

// ListVersionsByFunctionRequest indicates an expected call of ListVersionsByFunctionRequest
func (mr *MockLambdaAPIMockRecorder) ListVersionsByFunctionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsByFunctionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).ListVersionsByFunctionRequest), arg0)
}

// ListVersionsByFunctionWithContext mocks base method
func (m *MockLambdaAPI) ListVersionsByFunctionWithContext(arg0 aws.Context, arg1 *lambda.ListVersionsByFunctionInput, arg2 ...request.Option) (*lambda.ListVersionsByFunctionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersionsByFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.ListVersionsByFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsByFunctionWithContext indicates an expected call of ListVersionsByFunctionWithContext
func (mr *MockLambdaAPIMockRecorder) ListVersionsByFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsByFunctionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).ListVersionsByFunctionWithContext), varargs...)
}

// PublishVersion mocks base method
func (m *MockLambdaAPI) PublishVersion(arg0 *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error) {
	ret := m.ctrl.Call(m, "PublishVersion", arg0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishVersion indicates an expected call of PublishVersion
func (mr *MockLambdaAPIMockRecorder) PublishVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVersion", reflect.TypeOf((*MockLambdaAPI)(nil).PublishVersion), arg0)
}

// PublishVersionRequest mocks base method
func (m *MockLambdaAPI) PublishVersionRequest(arg0 *lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := m.ctrl.Call(m, "PublishVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

// PublishVersionRequest indicates an expected call of PublishVersionRequest
func (mr *MockLambdaAPIMockRecorder) PublishVersionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVersionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).PublishVersionRequest), arg0)
}

// PublishVersionWithContext mocks base method
func (m *MockLambdaAPI) PublishVersionWithContext(arg0 aws.Context, arg1 *lambda.PublishVersionInput, arg2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishVersionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishVersionWithContext indicates an expected call of PublishVersionWithContext
func (mr *MockLambdaAPIMockRecorder) PublishVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVersionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).PublishVersionWithContext), varargs...)
}

// RemovePermission mocks base method
func (m *MockLambdaAPI) RemovePermission(arg0 *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error) {
	ret := m.ctrl.Call(m, "RemovePermission", arg0)
	ret0, _ := ret[0].(*lambda.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermission indicates an expected call of RemovePermission
func (mr *MockLambdaAPIMockRecorder) RemovePermission(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermission", reflect.TypeOf((*MockLambdaAPI)(nil).RemovePermission), arg0)
}

// RemovePermissionRequest mocks base method
func (m *MockLambdaAPI) RemovePermissionRequest(arg0 *lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput) {
	ret := m.ctrl.Call(m, "RemovePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.RemovePermissionOutput)
	return ret0, ret1
}

// RemovePermissionRequest indicates an expected call of RemovePermissionRequest
func (mr *MockLambdaAPIMockRecorder) RemovePermissionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionRequest", reflect.TypeOf((*MockLambdaAPI)(nil).RemovePermissionRequest), arg0)
}

// RemovePermissionWithContext mocks base method
func (m *MockLambdaAPI) RemovePermissionWithContext(arg0 aws.Context, arg1 *lambda.RemovePermissionInput, arg2 ...request.Option) (*lambda.RemovePermissionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermissionWithContext indicates an expected call of RemovePermissionWithContext
func (mr *MockLambdaAPIMockRecorder) RemovePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).RemovePermissionWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockLambdaAPI) TagResource(arg0 *lambda.TagResourceInput) (*lambda.TagResourceOutput, error) {
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*lambda.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockLambdaAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLambdaAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockLambdaAPI) TagResourceRequest(arg0 *lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput) {
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockLambdaAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLambdaAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockLambdaAPI) TagResourceWithContext(arg0 aws.Context, arg1 *lambda.TagResourceInput, arg2 ...request.Option) (*lambda.TagResourceOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockLambdaAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockLambdaAPI) UntagResource(arg0 *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error) {
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*lambda.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockLambdaAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLambdaAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockLambdaAPI) UntagResourceRequest(arg0 *lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput) {
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockLambdaAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLambdaAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockLambdaAPI) UntagResourceWithContext(arg0 aws.Context, arg1 *lambda.UntagResourceInput, arg2 ...request.Option) (*lambda.UntagResourceOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockLambdaAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAlias mocks base method
func (m *MockLambdaAPI) UpdateAlias(arg0 *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := m.ctrl.Call(m, "UpdateAlias", arg0)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlias indicates an expected call of UpdateAlias
func (mr *MockLambdaAPIMockRecorder) UpdateAlias(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateAlias), arg0)
}

// UpdateAliasRequest mocks base method
func (m *MockLambdaAPI) UpdateAliasRequest(arg0 *lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := m.ctrl.Call(m, "UpdateAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AliasConfiguration)
	return ret0, ret1
}

// UpdateAliasRequest indicates an expected call of UpdateAliasRequest
func (mr *MockLambdaAPIMockRecorder) UpdateAliasRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAliasRequest", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateAliasRequest), arg0)
}

// UpdateAliasWithContext mocks base method
func (m *MockLambdaAPI) UpdateAliasWithContext(arg0 aws.Context, arg1 *lambda.UpdateAliasInput, arg2 ...request.Option) (*lambda.AliasConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAliasWithContext indicates an expected call of UpdateAliasWithContext
func (mr *MockLambdaAPIMockRecorder) UpdateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAliasWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateAliasWithContext), varargs...)
}

// UpdateEventSourceMapping mocks base method
func (m *MockLambdaAPI) UpdateEventSourceMapping(arg0 *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := m.ctrl.Call(m, "UpdateEventSourceMapping", arg0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventSourceMapping indicates an expected call of UpdateEventSourceMapping
func (mr *MockLambdaAPIMockRecorder) UpdateEventSourceMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventSourceMapping", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateEventSourceMapping), arg0)
}

// UpdateEventSourceMappingRequest mocks base method
func (m *MockLambdaAPI) UpdateEventSourceMappingRequest(arg0 *lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := m.ctrl.Call(m, "UpdateEventSourceMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

// UpdateEventSourceMappingRequest indicates an expected call of UpdateEventSourceMappingRequest
func (mr *MockLambdaAPIMockRecorder) UpdateEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventSourceMappingRequest", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateEventSourceMappingRequest), arg0)
}

// UpdateEventSourceMappingWithContext mocks base method
func (m *MockLambdaAPI) UpdateEventSourceMappingWithContext(arg0 aws.Context, arg1 *lambda.UpdateEventSourceMappingInput, arg2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEventSourceMappingWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventSourceMappingWithContext indicates an expected call of UpdateEventSourceMappingWithContext
func (mr *MockLambdaAPIMockRecorder) UpdateEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventSourceMappingWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateEventSourceMappingWithContext), varargs...)
}

// UpdateFunctionCode mocks base method
func (m *MockLambdaAPI) UpdateFunctionCode(arg0 *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error) {
	ret := m.ctrl.Call(m, "UpdateFunctionCode", arg0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunctionCode indicates an expected call of UpdateFunctionCode
func (mr *MockLambdaAPIMockRecorder) UpdateFunctionCode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunctionCode", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateFunctionCode), arg0)
}

// UpdateFunctionCodeRequest mocks base method
func (m *MockLambdaAPI) UpdateFunctionCodeRequest(arg0 *lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := m.ctrl.Call(m, "UpdateFunctionCodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

// UpdateFunctionCodeRequest indicates an expected call of UpdateFunctionCodeRequest
func (mr *MockLambdaAPIMockRecorder) UpdateFunctionCodeRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunctionCodeRequest", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateFunctionCodeRequest), arg0)
}

// UpdateFunctionCodeWithContext mocks base method
func (m *MockLambdaAPI) UpdateFunctionCodeWithContext(arg0 aws.Context, arg1 *lambda.UpdateFunctionCodeInput, arg2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFunctionCodeWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunctionCodeWithContext indicates an expected call of UpdateFunctionCodeWithContext
func (mr *MockLambdaAPIMockRecorder) UpdateFunctionCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunctionCodeWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateFunctionCodeWithContext), varargs...)
}

// UpdateFunctionConfiguration mocks base method
func (m *MockLambdaAPI) UpdateFunctionConfiguration(arg0 *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := m.ctrl.Call(m, "UpdateFunctionConfiguration", arg0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunctionConfiguration indicates an expected call of UpdateFunctionConfiguration
func (mr *MockLambdaAPIMockRecorder) UpdateFunctionConfiguration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunctionConfiguration", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateFunctionConfiguration), arg0)
}

// UpdateFunctionConfigurationRequest mocks base method
func (m *MockLambdaAPI) UpdateFunctionConfigurationRequest(arg0 *lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := m.ctrl.Call(m, "UpdateFunctionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

// UpdateFunctionConfigurationRequest indicates an expected call of UpdateFunctionConfigurationRequest
func (mr *MockLambdaAPIMockRecorder) UpdateFunctionConfigurationRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunctionConfigurationRequest", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateFunctionConfigurationRequest), arg0)
}

// UpdateFunctionConfigurationWithContext mocks base method
func (m *MockLambdaAPI) UpdateFunctionConfigurationWithContext(arg0 aws.Context, arg1 *lambda.UpdateFunctionConfigurationInput, arg2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFunctionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunctionConfigurationWithContext indicates an expected call of UpdateFunctionConfigurationWithContext
func (mr *MockLambdaAPIMockRecorder) UpdateFunctionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunctionConfigurationWithContext", reflect.TypeOf((*MockLambdaAPI)(nil).UpdateFunctionConfigurationWithContext), varargs...)
}
