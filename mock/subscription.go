// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/serverless/event-gateway/subscription (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	subscription "github.com/serverless/event-gateway/subscription"
	reflect "reflect"
)

// MockSubscriptionService is a mock of Service interface
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method
func (m *MockSubscriptionService) CreateSubscription(arg0 *subscription.Subscription) (*subscription.Subscription, error) {
	ret := m.ctrl.Call(m, "CreateSubscription", arg0)
	ret0, _ := ret[0].(*subscription.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription
func (mr *MockSubscriptionServiceMockRecorder) CreateSubscription(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).CreateSubscription), arg0)
}

// DeleteSubscription mocks base method
func (m *MockSubscriptionService) DeleteSubscription(arg0 string, arg1 subscription.ID) error {
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription
func (mr *MockSubscriptionServiceMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).DeleteSubscription), arg0, arg1)
}

// GetSubscriptions mocks base method
func (m *MockSubscriptionService) GetSubscriptions(arg0 string) (subscription.Subscriptions, error) {
	ret := m.ctrl.Call(m, "GetSubscriptions", arg0)
	ret0, _ := ret[0].(subscription.Subscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions
func (mr *MockSubscriptionServiceMockRecorder) GetSubscriptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockSubscriptionService)(nil).GetSubscriptions), arg0)
}
