// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/serverless/libkv/store (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/serverless/libkv/store"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AtomicDelete mocks base method
func (m *MockStore) AtomicDelete(arg0 string, arg1 *store.KVPair) (bool, error) {
	ret := m.ctrl.Call(m, "AtomicDelete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicDelete indicates an expected call of AtomicDelete
func (mr *MockStoreMockRecorder) AtomicDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicDelete", reflect.TypeOf((*MockStore)(nil).AtomicDelete), arg0, arg1)
}

// AtomicPut mocks base method
func (m *MockStore) AtomicPut(arg0 string, arg1 []byte, arg2 *store.KVPair, arg3 *store.WriteOptions) (bool, *store.KVPair, error) {
	ret := m.ctrl.Call(m, "AtomicPut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*store.KVPair)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AtomicPut indicates an expected call of AtomicPut
func (mr *MockStoreMockRecorder) AtomicPut(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicPut", reflect.TypeOf((*MockStore)(nil).AtomicPut), arg0, arg1, arg2, arg3)
}

// Close mocks base method
func (m *MockStore) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Delete mocks base method
func (m *MockStore) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), arg0)
}

// DeleteTree mocks base method
func (m *MockStore) DeleteTree(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteTree", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTree indicates an expected call of DeleteTree
func (mr *MockStoreMockRecorder) DeleteTree(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTree", reflect.TypeOf((*MockStore)(nil).DeleteTree), arg0)
}

// Exists mocks base method
func (m *MockStore) Exists(arg0 string, arg1 *store.ReadOptions) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockStoreMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStore)(nil).Exists), arg0, arg1)
}

// Get mocks base method
func (m *MockStore) Get(arg0 string, arg1 *store.ReadOptions) (*store.KVPair, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockStore) List(arg0 string, arg1 *store.ReadOptions) ([]*store.KVPair, error) {
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), arg0, arg1)
}

// NewLock mocks base method
func (m *MockStore) NewLock(arg0 string, arg1 *store.LockOptions) (store.Locker, error) {
	ret := m.ctrl.Call(m, "NewLock", arg0, arg1)
	ret0, _ := ret[0].(store.Locker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLock indicates an expected call of NewLock
func (mr *MockStoreMockRecorder) NewLock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLock", reflect.TypeOf((*MockStore)(nil).NewLock), arg0, arg1)
}

// Put mocks base method
func (m *MockStore) Put(arg0 string, arg1 []byte, arg2 *store.WriteOptions) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStoreMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStore)(nil).Put), arg0, arg1, arg2)
}

// Watch mocks base method
func (m *MockStore) Watch(arg0 string, arg1 <-chan struct{}, arg2 *store.ReadOptions) (<-chan *store.KVPair, error) {
	ret := m.ctrl.Call(m, "Watch", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan *store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockStoreMockRecorder) Watch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStore)(nil).Watch), arg0, arg1, arg2)
}

// WatchTree mocks base method
func (m *MockStore) WatchTree(arg0 string, arg1 <-chan struct{}, arg2 *store.ReadOptions) (<-chan []*store.KVPair, error) {
	ret := m.ctrl.Call(m, "WatchTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan []*store.KVPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTree indicates an expected call of WatchTree
func (mr *MockStoreMockRecorder) WatchTree(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTree", reflect.TypeOf((*MockStore)(nil).WatchTree), arg0, arg1, arg2)
}
