// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/serverless/event-gateway/subscription/cors (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	metadata "github.com/serverless/event-gateway/metadata"
	cors "github.com/serverless/event-gateway/subscription/cors"
	reflect "reflect"
)

// MockCORSService is a mock of Service interface
type MockCORSService struct {
	ctrl     *gomock.Controller
	recorder *MockCORSServiceMockRecorder
}

// MockCORSServiceMockRecorder is the mock recorder for MockCORSService
type MockCORSServiceMockRecorder struct {
	mock *MockCORSService
}

// NewMockCORSService creates a new mock instance
func NewMockCORSService(ctrl *gomock.Controller) *MockCORSService {
	mock := &MockCORSService{ctrl: ctrl}
	mock.recorder = &MockCORSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCORSService) EXPECT() *MockCORSServiceMockRecorder {
	return m.recorder
}

// CreateCORS mocks base method
func (m *MockCORSService) CreateCORS(arg0 *cors.CORS) (*cors.CORS, error) {
	ret := m.ctrl.Call(m, "CreateCORS", arg0)
	ret0, _ := ret[0].(*cors.CORS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCORS indicates an expected call of CreateCORS
func (mr *MockCORSServiceMockRecorder) CreateCORS(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCORS", reflect.TypeOf((*MockCORSService)(nil).CreateCORS), arg0)
}

// DeleteCORS mocks base method
func (m *MockCORSService) DeleteCORS(arg0 string, arg1 cors.ID) error {
	ret := m.ctrl.Call(m, "DeleteCORS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCORS indicates an expected call of DeleteCORS
func (mr *MockCORSServiceMockRecorder) DeleteCORS(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCORS", reflect.TypeOf((*MockCORSService)(nil).DeleteCORS), arg0, arg1)
}

// GetCORS mocks base method
func (m *MockCORSService) GetCORS(arg0 string, arg1 cors.ID) (*cors.CORS, error) {
	ret := m.ctrl.Call(m, "GetCORS", arg0, arg1)
	ret0, _ := ret[0].(*cors.CORS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCORS indicates an expected call of GetCORS
func (mr *MockCORSServiceMockRecorder) GetCORS(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCORS", reflect.TypeOf((*MockCORSService)(nil).GetCORS), arg0, arg1)
}

// ListCORS mocks base method
func (m *MockCORSService) ListCORS(arg0 string, arg1 ...metadata.Filter) (cors.CORSes, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCORS", varargs...)
	ret0, _ := ret[0].(cors.CORSes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCORS indicates an expected call of ListCORS
func (mr *MockCORSServiceMockRecorder) ListCORS(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCORS", reflect.TypeOf((*MockCORSService)(nil).ListCORS), varargs...)
}

// UpdateCORS mocks base method
func (m *MockCORSService) UpdateCORS(arg0 *cors.CORS) (*cors.CORS, error) {
	ret := m.ctrl.Call(m, "UpdateCORS", arg0)
	ret0, _ := ret[0].(*cors.CORS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCORS indicates an expected call of UpdateCORS
func (mr *MockCORSServiceMockRecorder) UpdateCORS(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCORS", reflect.TypeOf((*MockCORSService)(nil).UpdateCORS), arg0)
}
